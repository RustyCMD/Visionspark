Research how to make the GUI/UI/UX Much more better than it currently is on all pages visable by the user



# Critical Security and Bug Fixes

## 1. Purchase Validation Security Fix
**File:** `supabase/functions/validate-purchase-and-update-profile/index.ts`

**Fix Instructions:**
1. Remove the simulated validation comment
2. Implement proper Google Play Billing API validation:
   ```typescript
   // Add Google Play Billing API client
   const {GooglePlayBilling} = require('@google-cloud/billing');
   const billing = new GooglePlayBilling();
   
   // Validate purchase
   const isValid = await billing.purchases.products.get({
     packageName: 'app.visionspark.app',
     productId: productId,
     token: purchaseToken
   });
   
   if (!isValid) {
     throw new Error('Invalid purchase');
   }
   ```

## 2. Generation Credit Transaction Fix
**File:** `supabase/supabase/functions/generate-image-proxy/index.ts`

**Fix Instructions:**
1. Implement proper database transaction:
   ```typescript
   const { data, error } = await supabase.rpc('debit_generation_with_rollback', {
     user_id: userId,
     amount: 1
   });
   
   if (error) throw error;
   
   try {
     // Generate image
     const image = await generateImage(prompt);
     return image;
   } catch (e) {
     // Transaction will automatically rollback on error
     throw e;
   }
   ```

## 3. Subscription Tier Implementation Fix
**File:** `supabase/functions/get-generation-status/index.ts`

**Fix Instructions:**
1. Update subscription logic to use proper monthly limits:
   ```typescript
   const getMonthlyLimit = (tier: string) => {
     switch(tier) {
       case 'monthly_30': return 30;
       case 'monthly_unlimited': return Infinity;
       default: return 0;
     }
   };
   
   const resetDate = new Date(profile.last_reset);
   const now = new Date();
   const isNewMonth = resetDate.getMonth() !== now.getMonth();
   
   if (isNewMonth) {
     await supabase
       .from('profiles')
       .update({ 
         generations_remaining: getMonthlyLimit(profile.subscription_tier),
         last_reset: now.toISOString()
       })
       .eq('id', userId);
   }
   ```

## 4. Google Sign-In Secret Fix
**File:** `visionspark/lib/auth/auth_screen.dart`

**Fix Instructions:**
1. Create `.env` file in project root:
   ```
   GOOGLE_SIGN_IN_CLIENT_ID=825189008537-g4vin1f13liqji9524bnfj1cbmu9dp7b.apps.googleusercontent.com
   ```
2. Update auth code:
   ```dart
   import 'package:flutter_dotenv/flutter_dotenv.dart';
   
   final googleSignIn = GoogleSignIn(
     serverClientId: dotenv.env['GOOGLE_SIGN_IN_CLIENT_ID']
   );
   ```

## 5. Android Image Saving Fix
**File:** `visionspark/android/app/src/main/kotlin/app/visionspark/app/MainActivity.kt`

**Fix Instructions:**
1. Update image saving logic:
   ```kotlin
   private fun saveImage(bitmap: Bitmap) {
     val filename = "Visionspark_${System.currentTimeMillis()}.jpg"
     val contentValues = ContentValues().apply {
       put(MediaStore.Images.Media.DISPLAY_NAME, filename)
       put(MediaStore.Images.Media.MIME_TYPE, "image/jpeg")
       put(MediaStore.Images.Media.RELATIVE_PATH, Environment.DIRECTORY_PICTURES + "/Visionspark")
     }
     
     val resolver = applicationContext.contentResolver
     val uri = resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues)
     
     uri?.let {
       resolver.openOutputStream(it)?.use { stream ->
         bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream)
       }
     }
   }
   ```

2. Update AndroidManifest.xml permissions:
   ```xml
   <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" />
   <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" android:maxSdkVersion="32" />
   ```
